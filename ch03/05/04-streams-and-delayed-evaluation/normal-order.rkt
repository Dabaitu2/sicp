#lang racket

;; 在编程中使用显式的 `delay` 和 `force` 可以增加程序设计的灵活性，但同时也会使得程序变得更复杂。
;; 例如，书中提到的新版积分过程 `integral` 允许我们建模包含循环的系统，但是现在我们必须记住在调用 `integral` 时需要传入一个延迟计算的被积函数，而且任何使用 `integral` 的过程都必须意识到这一点。
;; 实际上，这就创造了两类过程：普通过程和接受延迟参数的过程。通常情况下，创建不同类别的过程会迫使我们创建不同类别的高阶过程。

;; 为了避免需要两种不同类别的过程，作者提出了一个解决方案：使所有过程默认都接受延迟参数。
;; 在这个模型中，所有传递给过程的参数都会自动被延迟求值，并且只有在真正需要时（例如被原始操作所需时）才强制它们进行计算。
;; 这将改变语言以使用正则序求值，并且如果我们只关心流处理，采用正则序求值将是一种统一且优雅地简化延迟求值使用的方法。 在第4.2节中研究评估器时，作者展示了如何以这种方式转换语言。


;; 不幸地是，包含在过程调用中的延迟对于依赖于事件顺序、使用赋值、变更数据或执行输入输出操作等程序设计能力造成了混乱。即使是 `cons-stream` 中单独一个延迟也可能引起极大混淆（如练习3.51和3.52所示）。
;; 据目前所知，在编程语言中可变性和延迟执行并不很好地结合在一起，同时处理两者仍然是编程语言研究领域中一个活跃但尚未解决问题。
