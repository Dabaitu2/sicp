#lang sicp

(#%require "../../../common/data/stream.rkt")

;; streamlike integral calculations
;; consider we have an input stream x = (xi), the integral should be
;; Sum as belowing:
;; Si= C + ∑_{j=1^i} x_j dt
;; which means, it's C + (x1+..xi)dt
;;
;; 定积分 本质上是 不定积分求出的结果函数(即原函数)的两点的值的差
;; 因为定积分是一个 f(x) (作为某个原函数的导函数) 的面积，这个函数 x 的变化，带来的 y 值
;; 本质上就是我们需要求的原函数的增量。而定积分这两个点之间的面积，正好就应该是原函数的所有
;; 极小值增量的和。也就是原函数两个 x 之间的 y 的差值
;; 所以说，如果我们能够求出不定积分所对应的原函数，求定积分就会很简单
;;
;; 这里的操作和前面的 guess 如出一辙
;; 由于每一个 Si 的结果其实都是上一个 Si-1 + xjdt 形成的
;; 我们只需要将上一个 integral 的结果和当前的 integrand 的结果相加即可
;; 这就自然就是 add-stream

;; 这里在尝试求定积分
;; integrand 是被积函数
;; initial-value 是积分常数 C, 也就是原函数带上的那个常数 C,
(define (integral integrand initial-value dt)
  (define int
    (cons-stream initial-value
                 (add-stream (scale-stream integrand dt)
                             int)))
  int)

;; 假设我们对函数 y = 1 求积分
;; 而导函数 y = 1 在 (0, 4) 之间的图像面积就是 1 * 4 = 4
;; 我们用如下的增量方案算出来的第 400 步增量 (每一步增长 0.01) 获得的结果就是 4
(stream-ref (integral ones 0 0.01) 400)
